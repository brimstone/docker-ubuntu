#!/bin/bash
set -x
set -euo pipefail

distro="$1"

# need to be root
rm -rf "$distro"
mkdir -p "$distro/usr/sbin"

# Setup a shim so packages don't start services inside the chroot
echo '#!/bin/sh' > "$distro/usr/sbin/policy-rc.d"
echo 'echo "************************************" >&2' >> "$distro/usr/sbin/policy-rc.d"
echo 'echo "All rc.d operations denied by policy" >&2' >> "$distro/usr/sbin/policy-rc.d"
echo 'echo "************************************" >&2' >> "$distro/usr/sbin/policy-rc.d"
echo 'exit 101' >> "$distro/usr/sbin/policy-rc.d"
chmod 755 "$distro/usr/sbin/policy-rc.d"

mkdir "$distro/sbin"
# Setup a link that insserv expects
ln -s /usr/lib/insserv/insserv "$distro/sbin/insserv"
# Actually install $distro
multistrap -f "$distro.cfg" || true

echo "Performing cleanup"
cd "$distro"
# fix base-files error
ls -l var/run/
rm var/run/* || true
chroot . apt-get -f install
chroot . dpkg -l | grep -v "^ii"
echo "END"
echo
# clean download apt packages
chroot . apt-get clean
# setup special mountpoints
mkdir -p {sys,dev/pts}
# fix up console like notes to redirect to docker's stdout
rm dev/console
ln -s tty dev/console
# save upstart
# TODO is this really sbin/upstart anyway?
mv sbin/init sbin/upstart.real
# remove the shim from earlier
rm usr/sbin/policy-rc.d
# clean out the tmpfs for pids
rm -rf run/*
# move screwy upstart files out of the way
find etc/init -ls
mv etc/init etc/init.old
mkdir etc/init
# whitelist the ones we know work
for f in networking container-detect rc rcS rc-sysinit procps; do
	[ -e "etc/init.d/$f.conf" ] && mv etc/init.old/$f.conf etc/init/
done
# Fix up procps so it doesn't exit stupid
for a in kernel.printk kernel.kptr_restrict kernel.yama.ptrace_scope vm.mmap_min_addr; do
	sed -i "/$a/d" etc/sysctl.d/*.conf /etc/sysctl.conf
done
# remove weird sysvinit script
rm etc/init.d/ondemand
rm etc/rc*.d/*ondemand
# setup container shim
cat <<EOF > etc/init/container.conf
# generated from docker-trusty build script
description "Alert upstart about everything docker did."

start on startup
stop on starting rcS

#task

# from mountall.conf
emits filesystem
emits static-network-up
emits local-filesystems
emits mounted

# Upstart is bullshit.

script
initctl emit -n filesystem
initctl emit -n static-network-up
initctl emit -n local-filesystems
initctl emit -n mounted
end script

EOF
# slide initctl out of the way incase the user tries to apt-get anything in their dockerfile
chroot . dpkg-divert --local --rename --add /sbin/initctl
ln -s /bin/true sbin/initctl
# this should fix up the container right before it runs
cat <<EOF > sbin/upstart
#!/bin/sh
# fix initctl so it reports the right value of services
if [ -L /sbin/initctl ]; then
	rm /sbin/initctl
	dpkg-divert --rename --remove /sbin/initctl >/dev/null
fi
# setup kmsg to point to tty
rm /dev/kmsg 2>/dev/null
ln -s tty /dev/kmsg
[ -n "\$@" ] && cat <<DOG > /etc/init/final.conf
description "Final script after upstart has loaded everything else."

start on started

env HOME=/

task

script
	\$@; rm /etc/init/final.conf
end script
DOG
# actually execute upstart
exec /sbin/upstart.real --verbose --debug
EOF

chmod 755 sbin/upstart

# Allow one time containery things to happen at boot in a super simple way:
: > etc/rc.local


cd ..
# copy over any additional files
cp -a root/* "$distro/"

tar -zcf "$distro.tar.gz" -C "$distro" .
